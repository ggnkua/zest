; Atari ST IKBD ROM source code
; disassembled using f9dasm (https://github.com/Arakula/f9dasm)
;

;****************************************************
;* Used Labels					*
;****************************************************

; I/O port registers
DDR1	EQU	$0000		; Data Direction Register 1
DDR2	EQU	$0001		; Data Direction Register 2
DR1	EQU	$0002		; Data Register 1
DR2	EQU	$0003		; Data Register 2
DDR3	EQU	$0004		; Data Direction Register 3
DDR4	EQU	$0005		; Data Direction Register 4
DR3	EQU	$0006		; Data Register 3
DR4	EQU	$0007		; Data Register 4
; 16-bit timer
TCSR	EQU	$0008		; Timer Control/Status Register
FRC	EQU	$0009		; Free Running Counter
OCR	EQU	$000B		; Output Compare Register
ICR	EQU	$000D		; Input Capture Register
; Serial communication interface
RMCR	EQU	$0010		; Rate & Mode Control Register
TRCSR	EQU	$0011		; Transmit/Receive Control & Status Register
RDR	EQU	$0012		; Receive Data Register
TDR	EQU	$0013		; Transmit Data Register
; Ram control
RCR	EQU	$0014		; RAM Control Register

M0080	EQU	$0080
M0082	EQU	$0082
M0083	EQU	$0083
M0084	EQU	$0084
M0088	EQU	$0088
modkbf	EQU	$0089		; active mod keys: 2:Control,3:LShift,4:Alt,5:RShift
cur_col	EQU	$008A		; current keyboard matrix column
M008B	EQU	$008B
col_msk	EQU	$008C		; matrix column mask (2^cur_col) (16-bit)
row_val	EQU	$008E		; row bits values (pressed keys in row = 1)
M008F	EQU	$008F
M0091	EQU	$0091
M0093	EQU	$0093
M0094	EQU	$0094
M0095	EQU	$0095
joybut	EQU	$009B
M009C	EQU	$009C
M009D	EQU	$009D
M009E	EQU	$009E
M009F	EQU	$009F
M00A0	EQU	$00A0
M00A1	EQU	$00A1
M00A2	EQU	$00A2
M00A4	EQU	$00A4
M00A5	EQU	$00A5
M00A6	EQU	$00A6
M00A7	EQU	$00A7
M00A8	EQU	$00A8
M00A9	EQU	$00A9
M00AA	EQU	$00AA
M00AC	EQU	$00AC
M00AE	EQU	$00AE
M00AF	EQU	$00AF
M00B0	EQU	$00B0
M00B1	EQU	$00B1
M00B2	EQU	$00B2
M00B3	EQU	$00B3
M00B4	EQU	$00B4
M00B5	EQU	$00B5
M00B6	EQU	$00B6
M00B8	EQU	$00B8
M00BA	EQU	$00BA
M00BB	EQU	$00BB
M00BC	EQU	$00BC
M00BD	EQU	$00BD
mousxpn	EQU	$00BE		; mouse X pin data
mousypn	EQU	$00BF		; mouse Y pin data
M00C0	EQU	$00C0
M00C1	EQU	$00C1
M00C2	EQU	$00C2
M00C3	EQU	$00C3
M00C4	EQU	$00C4
M00C5	EQU	$00C5
M00C6	EQU	$00C6
M00C7	EQU	$00C7
M00C8	EQU	$00C8
M00C9	EQU	$00C9
M00CA	EQU	$00CA
M00CB	EQU	$00CB
M00CC	EQU	$00CC
M00CD	EQU	$00CD
M00CE	EQU	$00CE
M00D4	EQU	$00D4
sdbfend	EQU	$00D5		; serial transmit ring buffer end
sdbfbeg	EQU	$00D6		; serial transmit ring buffer begin
M00D7	EQU	$00D7		; free bytes in ring buffer + $80 if ready to send
M00D8	EQU	$00D8
sendbuf	EQU	$00D9		; serial transmit ring buffer
M00EE	EQU	$00EE
M00F0	EQU	$00F0
M00F1	EQU	$00F1
M00F8	EQU	$00F8
M00FF	EQU	$00FF

;****************************************************
;* Program Code / Data Areas			*
;****************************************************

	ORG	$F000

hdlr_RST
	LDAA	M0088
	CMPA	#$AA
	BEQ	ZF010
	LDD	#M0080
	BRA	ZF014
ZF00B	TIM	#$01,TRCSR
	BNE	ZF00B
ZF010	SEI
	LDD	#modkbf
ZF014	LDS	#M00FF		;set stack
	CLRA
	STAA	DDR1
	INCA
	STAA	DR2
	STAA	DDR2
	LDX	#$FFFF
	STX	DR3		;port 3/4 output->all 1
	STX	DDR3		;port 3/4 direction->all out
	LDAA	#$05
	STAA	RMCR		;serial speed 7812.5 bps
	LDAA	#$1A		;serial tr/recv enable
	STAA	TRCSR		;+enable recv interrupt
	LDAA	TRCSR
	LDAA	RDR
	CMPB	#$89
	BEQ	ZF048
	CLRA
ZF037	DECA
	NOP
	BNE	ZF037
	OIM	#$01,TRCSR
	LDAA	#$20
ZF040	DECA
	BNE	ZF040
ZF043	TIM	#$01,TRCSR
	BNE	ZF043
ZF048	LDAA	#$08
	STAA	TCSR
; Fill memory $80-$FF (or $89-$FF) with $5A then $A5
ZF04C	LDAA	#$5A
ZF04E	LDX	#0
	ABX
ZF052	STAA	,X
	INX
	CPX	#$100
	BNE	ZF052
; Now test memory values
	LDX	#0
	ABX
ZF05E	CMPA	,X
	BNE	ZF04C
	INX
	CPX	#$100
	BNE	ZF05E
	CMPA	#$A5		;last checked value?
	BEQ	ZF070		;end of memory test
	LDAA	#$A5		;restart test with $A5
	BRA	ZF04E
; Checksum $F000-chksum+1 + $FFF0-$FFFF
ZF070	CLRA
	LDX	#hdlr_RST
ZF074	ADCA	,X
	INX
	BEQ	ZF083
	CPX	#chksum+1
	BNE	ZF074
	LDX	#svec_SCI
	BRA	ZF074
ZF083	COMA			;invert A
	BNE	ZF04C		;if A non zero->restart
; Test keyboard
	LDAB	#$01		;column counter (no 0 column)
	STAB	cur_col		;
	CLRA
	INCB			;A/B = column mask
ZF08C	STD	col_msk		;save mask
	COMA			;complement mask
	COMB
	STAB	DR3		;output column mask
	STAA	DR4
	LDAA	DR1		;get row result
	COMA			;complement
	BNE	ZF0A3		;at least one key stuck
ZF099	INC	>cur_col	;increment column
	LDD	col_msk		;get column mask
	ASLD			;shift column mask
	BCC	ZF08C		;loop if not end of scan
	BRA	ZF0CF		;end of keyboard test
; at least one key is stuck at boot
ZF0A3	LDAB	cur_col		;matrix column
	CMPB	#$05		;columns 5-15
	BCC	ZF0BA		;error
	BITA	#$01		;row 0
	BNE	ZF0BA		;error
	BITA	#$F0		;rows 1-3
	BEQ	ZF099		;no error (no key in matrix)
	DECB
	LDX	#scanmod	;scancode table for mod keys
	ABX
	LDAA	,X		;get scancode
	BRA	ZF0C5
; error management for stuck keys
ZF0BA	LDAB	#$01
; invalid code?
;	TST	$58,X		;should raise an error/reset
	FCB	$6D

ZF0BD	ASLB
	LSRA
	BCC	ZF0BD
	TBA
	JSR	ZF2F7
; manage error for stuck mod key (Control,Alternate,Shifts)
ZF0C5	ORAA	#$80		;set release bit on scancode
ZF0C7	LDAB	TRCSR
	BITB	#$20		;transmit data register empty?
	BEQ	ZF0C7
	STAA	TDR		;send scancode with release bit
; clear ram, either $80-$FF or $89-$FF
ZF0CF	LDD	#$FFFF
	STD	DR3		;ports 3/4 data output=all 1s
ZF0D4	LDAA	TRCSR
	BITA	#$20		;transmit data register empty?
	BEQ	ZF0D4
	LDAA	#$F1
	STAA	TDR		;send $F1
	CLRA
	LDX	#0
	LDAB	M0082
	CMPB	#$A5		;memtest value after power on
	BNE	ZF0EC
	LDAB	#$80		;power on: clear $80-$FF
	BRA	ZF0EE
ZF0EC	LDAB	#$89		;reset: clear $89-$FF
ZF0EE	ABX			;set index
ZF0EF	STAA	,X		;clear mem
	INX
	CPX	#$100
	BNE	ZF0EF
; initialise some variables
	LDAB	#$AA
	STAB	M0088
	LDAB	#$80
	STAB	M008B
	LDAB	#$01
	STAB	cur_col
	INCB
	STD	col_msk
	INCA
	STAA	M00B0
	STAA	M00B1
	STAA	M00B2
	STAA	M00B3
	LDAA	#$98
	STAA	M00C9
	LDAA	#$28
	STAA	M00CA
	LDAA	#$06
	STAA	joybut
	LDAA	#$95
	STAA	M00D7
	LDAA	#$FE
	STAA	DR2
	CLRA
	STAA	DDR4		;port 4 direction: in
;
	JSR	updmous		;update mouse values
	LDD	FRC		;cycle counter (1MHz)
	ADDB	#$13		;+19 us
	CMPB	OCR+1
	BNE	ZF132
	NOP
ZF132	LDD	FRC
	ADDD	#RMCR
	STD	OCR
	CLI			;enable interrupts
ZF13A	LDAA	M00CB
	BPL	ZF141
	JSR	ZF8D4
ZF141	LDAB	M00C9
	BITB	#$02
	BNE	ZF171
	TSTB
	BPL	ZF157
	JSR	ZF186
	JMP	ZF371
ZF150	LDAA	M00CB
	BPL	ZF171
	JSR	ZF8D4
ZF157	TIM	#$20,M00CA
	BEQ	ZF13A
	LDAA	M00C9
	BPL	ZF16B
ZF160	LDAA	DR4
	CMPA	DR4
	BNE	ZF160
	ANDA	#$F0
	JMP	ZF681
ZF16B	JSR	ZF186
	JMP	ZF681
ZF171	LDAA	M00CA
	BITA	#$20
	BEQ	ZF13A
	BITA	#$03
	BEQ	ZF16B
	TIM	#$08,M00CB
	BNE	ZF13A
	LSRA
	BCC	ZF16B
	JMP	ZF8A2
ZF186	LDAA	DR2
	CMPA	DR2
	BNE	ZF186
	ANDA	#$06
	LDAB	M009D
	BEQ	ZF1A7
	CMPB	#$0A
	BCS	ZF1B0
	CLRB
	STAB	M009D
	STAA	M00C5
	TAB
	EORA	M009C
	ANDA	joybut
	ANDB	M009C
	ABA
	STAA	joybut
	LDAA	M00C5
ZF1A7	CMPA	joybut
	BEQ	ZF1B0
	STAA	M009C
	INC	>M009D
ZF1B0	LDAA	DR4
	CMPA	DR4
	BNE	ZF1B0
	RTS
; update keyboard status
ZF1B7	LDAA	#$01
	STAA	DR2		; disable joystick directions
	LDD	col_msk		; current column mask
	COMA
	COMB
	STAB	DR3		; write mask (low byte)
	LDAB	#$FF
	STAB	DDR4		; port 4 - all output
	STAA	DR4		; write mask (high byte)
ZF1C7	LDAA	DR1		; get row values
	CMPA	DR1
	BNE	ZF1C7		; debounce
	LDX	#$FFFF
	STX	DR3		; deselect all columns
	LDAB	#$FE
	STAB	DR2		; select joystick directions
	CLRB
	STAB	DDR4		; port 4 - input
	COMA			; invert row bits
	BNE	ZF1E3		; at least one key is pressed
	LDAB	modkbf
	BNE	ZF1E3
	JMP	ZF2D5
ZF1E3	STAA	row_val
	LDAB	cur_col		; current column
	CMPB	#$05		; columns 5-15
	BCC	ZF240
	DECB			; column interval is now 0-3
	LDX	#MF1FE
	ABX
	LDAA	,X
	STAA	M0093		; row bit mask for mod key
	LDAB	#$04
	ABX
	LDAA	,X		; row bit for specific column
	ABX
	LDAB	,X		; scancode for modifier key
	BRA	ZF20A

MF1FE	FCB	$04,$08,$10,$20		;bits in modkbf: Control,LShift,Alt,RShift
	FCB	$10,$20,$40,$80		;matrix row bits: Control,LShift,Alt,RShift
scanmod	FCB	$1D,$2A,$38,$36		;scancodes for Control,LShift,Alt,RShift

ZF20A	BITA	row_val		; test bit for modifier key
	BEQ	ZF220
	COMA
	ANDA	row_val		; remove bit from row vals
	STAA	row_val
ZF213	LDAA	M0093
	BITA	modkbf		; already in modifier bitfield?
	BNE	ZF237		; key event already processed
	ORAA	modkbf		; set the bitfield bit
	STAA	modkbf
	CLRA			; release bit=0
	BRA	ZF22F
ZF220	LDAA	modkbf
	BITA	M0093		; already not in mod bitfield?
	BEQ	ZF237		; key event already processed
	LDAA	M0093
	COMA
	ANDA	modkbf		; clear the bitfield bit
	STAA	modkbf
	LDAA	#$80		; release bit=1
ZF22F	STAB	M0093		; scan code
	ORAA	M0093		; scan code+release bit
	CLRB			; no repeat
	JSR	tx_val		; put byte in send buffer
ZF237	LDAA	cur_col
	CMPA	#$01		; column 1 ?
	BNE	ZF240
	JMP	ZF2D5		; end of loop
; Manage all other non modifier keys
ZF240	LDAA	TRCSR
	BITA	#$C0		; recv register full or overrun?
	BEQ	ZF252		; no, pass the overrun test
	BITA	#$40		; overrun?
	BEQ	ZF24F
	; Manage SCI overruns
	JSR	sci_ovr		; overrun management
	BRA	ZF252
ZF24F	JSR	sci_rec		; manage received byte
ZF252	LDAB	M008B
	BMI	ZF29A
	LDAA	#$01
	LDAB	modkbf
	ANDB	#$03
	DECB
	CMPB	#$02
	BNE	ZF26B
	CLRA
	CLRB
	BRA	ZF26B
ZF265	LDAB	M0093
	BNE	ZF2CF
	INCB
	TBA
ZF26B	STAA	M0093
	LDX	#M0091
	ABX
	LDAA	,X
	CMPA	cur_col
	BNE	ZF265
	DEX
	DEX
	LDAA	,X
	BITA	row_val
	BEQ	ZF286
	COMA
	ANDA	row_val
	STAA	row_val
	BRA	ZF265
ZF286	INCB
	COMB
	ANDB	modkbf
	STAB	modkbf
	JSR	ZF2E8
	JSR	ZF2F7
	ORAA	#$80
	CLRB
	JSR	tx_val
	BRA	ZF265
ZF29A	LDAA	row_val
	BEQ	ZF2D5
	LDAB	#$01
	BRA	ZF2A3
ZF2A2	ASLB
ZF2A3	LSRA
	BCC	ZF2A2
	TBA
	STAB	M0093
	COMB
	ANDB	row_val
	STAB	row_val
	LDAB	M008B
	ANDB	#$03
	LDX	#M008F
	ABX
	STAA	,X
	INX
	INX
	LDAA	cur_col
	STAA	,X
	INCB
	ORAB	modkbf
	STAB	modkbf
	JSR	ZF2E8
	LDAA	M0093
	JSR	ZF2F7
	CLRB
	JSR	tx_val
ZF2CF	LDAA	M008B
	CMPA	#$02
	BNE	ZF29A
ZF2D5	LDD	col_msk
	ASLD
	BCS	ZF2DF
	INC	>cur_col
	BRA	ZF2E3
ZF2DF	INCB
	STAB	cur_col
	INCB
ZF2E3	STD	col_msk
	JMP	ZFECC
ZF2E8	ANDB	#$03
	LDX	#MF2F3
	ABX
	LDAB	,X
	STAB	M008B
	RTS
MF2F3	FCB	$80,$01,$00,$02
ZF2F7	LDX	#MF311
	LDAB	cur_col
	CMPB	#$05
	BCS	ZF30D
	SUBB	#$04
	ASLB
	ASLB
	ASLB
	ABX
	CLRB
	BRA	ZF30A
ZF309	INCB
ZF30A	LSRA
	BCC	ZF309
ZF30D	ABX
	LDAA	,X
	RTS

MF311
	FCB	$00,$00,$3B,$3C,$3D,$00,$00,$00,$3E,$01,$02,$0F,$10,$1E,$60,$2C
	FCB	$3F,$03,$04,$11,$12,$1F,$20,$2D,$40,$05,$06,$13,$14,$21,$2E,$2F
	FCB	$41,$07,$08,$15,$22,$23,$30,$31,$42,$09,$0A,$16,$17,$24,$25,$32
	FCB	$43,$0B,$0C,$18,$19,$26,$33,$39,$44,$0D,$29,$1A,$1B,$27,$34,$3A
	FCB	$62,$0E,$53,$52,$2B,$1C,$28,$35,$61,$48,$47,$4B,$50,$4D,$6D,$70
	FCB	$63,$64,$67,$68,$6A,$6B,$6E,$71,$65,$66,$69,$4A,$6C,$4E,$6F,$72

ZF371	ANDA	#$0F
ZF373	STAA	M00C6
	ANDA	#$03
	LDX	#mousxpn
	CLR	>M00C8
	LDAB	M00C3
	JSR	ZF3E3
	STAA	M00C3
ZF384	LDAA	M00C6
	LSRA
	LSRA
	ANDA	#$03
	LDX	#mousypn
	LDAB	#$01
	STAB	M00C8
	LDAB	M00C4
	JSR	ZF3E3
	STAA	M00C4
	CLR	>M00C1
	LDAB	joybut
	ANDB	#$06
	BEQ	ZF3A5
	CMPB	#$06
	BNE	ZF3A7
ZF3A5	EORB	#$06
ZF3A7	TBA
	EORB	M00C0
	BEQ	ZF3CB
	STAA	M00C0
	STAB	M00C5
	TAB
	ANDB	M00C5
	STAB	M00C6
	LSRB
	ORAB	M00C6
	ANDB	#$05
	STAB	M00C1
	COMA
	TAB
	ANDB	M00C5
	STAB	M00C6
	ASLB
	ORAB	M00C6
	ANDB	#$0A
	ORAB	M00C1
	STAB	M00C1
ZF3CB	LDAA	M00C9
	ASLA
	ASLA
	BCC	ZF3D4
	JMP	ZF5EB
ZF3D4	ASLA
	BCC	ZF3DA
	JMP	ZF439
ZF3DA	ASLA
	BCC	ZF3E0
	JMP	ZF4BA
ZF3E0	JMP	ZF150
ZF3E3	ANDB	#$E0
	STAA	M00C5
	EORA	,X
	BEQ	ZF434
	CMPA	#$03
	BNE	ZF3F4
	ORAB	#$02
	TBA
	BRA	ZF42F
ZF3F4	PSHB
	LDAB	,X
	BEQ	ZF400
	CMPB	#$03
	BEQ	ZF400
	COMA
	ANDA	#$03
ZF400	PULB
	CMPA	#$01
	BNE	ZF413
	BITB	#$60
	BEQ	ZF41F
	LDAA	#$01
	SUBB	#$20
	BITB	#$60
	BEQ	ZF41F
	BRA	ZF436
ZF413	BITB	#$40
	BNE	ZF41D
	ADDB	#$20
	BITB	#$40
	BEQ	ZF436
ZF41D	LDAA	#$C1
ZF41F	LDAB	M00C8
	BEQ	ZF42D
	TIM	#$40,M00C9
	BNE	ZF42F
	TIM	#$01,M00C9
	BNE	ZF42F
ZF42D	EORA	#$80
ZF42F	LDAB	M00C5
	STAB	,X
	RTS
ZF434	TBA
	RTS
ZF436	TBA
	BRA	ZF42F
ZF439	LDX	#M00B8
	LDD	M00AC
	STD	M00C5
	LDAA	M00B3
	LDAB	M00C4
	JSR	ZF488
	LDX	#M00B6
	LDD	M00AA
	STD	M00C5
	LDAA	M00B2
	LDAB	M00C3
	JSR	ZF488
	LDAB	M00C1
	BEQ	ZF485
	TBA
	ORAA	M00C2
	STAA	M00C2
	TIM	#$04,M00B4
	BEQ	ZF466
	JMP	ZF62B
ZF466	CLRA
	BITB	#$05
	BEQ	ZF46D
	ORAA	#$01
ZF46D	BITB	#$0A
	BEQ	ZF473
	ORAA	#$02
ZF473	ANDA	M00B4
	BEQ	ZF485
	STAB	M00B5
	LDAB	#$05
	LDX	#M00B5
	SEI
	LDAA	#$F7
	JSR	tx_val
	CLI
ZF485	JMP	ZF150
ZF488	BITB	#$03
	BEQ	ZF4B9
ZF48C	PSHB
	ASLB
	TAB
	LDAA	#$00
	STD	M00C7
	LDD	,X
	BCC	ZF4A0
	SUBD	M00C7
	BCC	ZF4A2
	LDD	#DDR1
	BRA	ZF4B6
ZF4A0	ADDD	M00C7
ZF4A2	STD	M00C7
	SUBD	M00C5
	BCC	ZF4B4
	LDD	M00C7
	STD	,X
	PULB
	SUBB	#$01
	BITB	#$01
	BNE	ZF48C
	RTS
ZF4B4	LDD	M00C5
ZF4B6	STD	,X
	PULB
ZF4B9	RTS
ZF4BA	CLR	>M00C6
	LDAB	M00C4
	STAB	M00C8
	AIM	#$03,M00C8
	LDAA	M00BD
	ASLB
	BCC	ZF4EE
	SUBA	M00C8
	CMPA	#$81
	BCC	ZF4D7
	CMPA	#$7F
	BCS	ZF4D7
	LDAA	#$80
	STAA	M00C6
ZF4D7	STAA	M00BD
	BPL	ZF4E5
	NEGA
	CMPA	M00B1
	BCS	ZF4FF
	OIM	#$02,M00C6
	BRA	ZF4FF
ZF4E5	CMPA	M00B1
	BCS	ZF4FF
	OIM	#$01,M00C6
	BRA	ZF4FF
ZF4EE	ADDA	M00C8
	CMPA	#$7F
	BCS	ZF4D7
	CMPA	#$81
	BCC	ZF4D7
	OIM	#$40,M00C6
	LDAA	#$7F
	BRA	ZF4D7
ZF4FF	LDAB	M00C3
	STAB	M00C8
	AIM	#$03,M00C8
	LDAA	M00BC
	ASLB
	BCC	ZF531
	SUBA	M00C8
	CMPA	#$81
	BCC	ZF51A
	CMPA	#$7F
	BCS	ZF51A
	LDAA	#$80
	OIM	#$80,M00C6
ZF51A	STAA	M00BC
	BPL	ZF528
	NEGA
	CMPA	M00B0
	BCS	ZF542
	OIM	#$02,M00C6
	BRA	ZF542
ZF528	CMPA	M00B0
	BCS	ZF542
	OIM	#$01,M00C6
	BRA	ZF542
ZF531	ADDA	M00C8
	CMPA	#$7F
	BCS	ZF51A
	CMPA	#$81
	BCC	ZF51A
	OIM	#$40,M00C6
	LDAA	#$7F
	BRA	ZF51A
ZF542	LDAA	M00C6
	BEQ	ZF55B
	ANDA	#$C0
	BNE	ZF581
	TIM	#$08,M00C9
	BNE	ZF556
	TIM	#$0F,M00C1
	BEQ	ZF5A5
	BRA	ZF581
ZF556	TIM	#$80,M00D7
	BNE	ZF581
ZF55B	TIM	#$0F,M00C1
	BEQ	ZF5A5
	TIM	#$04,M00B4
	BEQ	ZF568
	JMP	ZF62B
ZF568	LDAA	M00C0
	LSRA
	ORAA	#$F8
	LDX	#M00BC
	SEI
	LDAB	#$02
	JSR	tx_val
	BCC	ZF57E
	CLR	>M00BD
	CLR	>M00BC
ZF57E	CLI
	BRA	ZF5A5
ZF581	LDAA	M00C0
	LSRA
	ORAA	#$F8
	LDX	#M00BC
	SEI
	LDAB	#$02
	JSR	tx_val
	BCC	ZF597
	CLR	>M00BD
	CLR	>M00BC
ZF597	CLI
	TIM	#$0F,M00C1
	BEQ	ZF5A5
	TIM	#$04,M00B4
	BEQ	ZF5A5
	JMP	ZF62B
ZF5A5	JMP	ZF150
ZF5A8	CLR	>M00C6
	STAB	M00C8
	AIM	#$03,M00C8
	LDAA	,X
	ASLB
	BCC	ZF5DA
	SUBA	M00C8
	CMPA	#$81
	BCC	ZF5C4
	CMPA	#$7F
	BCS	ZF5C4
	OIM	#$80,M00C6
	LDAA	#$80
ZF5C4	STAA	,X
	BPL	ZF5D2
	NEGA
	CMPA	M00C5
	BCS	ZF5D9
	OIM	#$02,M00C6
	BRA	ZF5D9
ZF5D2	CMPA	M00C5
	BCS	ZF5D9
	OIM	#$01,M00C6
ZF5D9	RTS
ZF5DA	ADDA	M00C8
	CMPA	#$7F
	BCS	ZF5C4
	CMPA	#$81
	BCC	ZF5C4
	OIM	#$40,M00C6
	LDAA	#$7F
	BRA	ZF5C4
ZF5EB	LDAA	M00AF
	STAA	M00C5
	LDX	#M00BB
	LDAB	M00C4
	JSR	ZF5A8
	LDAA	M00C6
	BEQ	ZF60B
	ANDA	#$82
	BEQ	ZF603
	LDAB	#$01
	BRA	ZF605
ZF603	LDAB	#$00
ZF605	JSR	ZF656
	CLR	>M00BB
ZF60B	LDAA	M00AE
	STAA	M00C5
	LDX	#M00BA
	LDAB	M00C3
	JSR	ZF5A8
	LDAA	M00C6
	BEQ	ZF62B
	ANDA	#$82
	BEQ	ZF623
	LDAB	#$03
	BRA	ZF625
ZF623	LDAB	#$02
ZF625	JSR	ZF656
	CLR	>M00BA
ZF62B	LDAB	M00C1
	BEQ	ZF653
	ANDB	#$03
	BEQ	ZF63F
	LSRB
	BCC	ZF63A
	LDAB	#$05
	BRA	ZF63C
ZF63A	LDAB	#$07
ZF63C	JSR	ZF656
ZF63F	LDAB	M00C1
	ANDB	#$0C
	BEQ	ZF653
	LSRB
	LSRB
	LSRB
	BCC	ZF64E
	LDAB	#$04
	BRA	ZF650
ZF64E	LDAB	#$06
ZF650	JSR	ZF656
ZF653	JMP	ZF150
ZF656	CLR	>M00C7
	LDX	#MF679
	ABX
	LDAA	,X
	CMPA	#$60
	BCC	ZF665
	STAA	M00C7
ZF665	SEI
	CLRB
	JSR	tx_val
	BCC	ZF677
	LDAA	M00C7
	BEQ	ZF677
	ORAA	#$80
	CLR	>M00C7
	BRA	ZF665
ZF677	CLI
	RTS

MF679	FCB	$48,$50,$4D,$4B,$74,$75,$F4,$F5

ZF681	COMA
	LDAB	M009E
	BEQ	ZF69B
	CMPB	#$05
	BCS	ZF6A4
	CLRB
	STAB	M009E
	STAA	M00C5
	TAB
	EORA	M00A0
	ANDA	M009F
	ANDB	M00A0
	ABA
	STAA	M009F
	LDAA	M00C5
ZF69B	CMPA	M009F
	BEQ	ZF6A4
	STAA	M00A0
	INC	>M009E
ZF6A4	TIM	#$04,M00CA
	BEQ	ZF6AC
	JMP	ZF7A6
ZF6AC	LDAA	M009F
	CMPA	M00A9
	BNE	ZF6C0
	LDAA	joybut
	LDAB	M00C9
	BITB	#$02
	BNE	ZF707
	TSTB
	BPL	ZF705
	JMP	ZF13A
ZF6C0	STAA	M00A9
	TIM	#$02,M00C9
	BNE	ZF6CC
	LDX	#$FFFF
	BRA	ZF6EA
ZF6CC	LDX	#DDR1
	ANDA	#$0F
ZF6D1	LDAB	$A4,X
	ANDB	#$0F
	CBA
	BEQ	ZF6F4
	LDAB	$A4,X
	ASLA
	ASLB
	RORA
	STAA	$A4,X
	DEX
	BNE	ZF6E7
	OIM	#$40,M00CA
	BRA	ZF6F7
ZF6E7	OIM	#$80,M00CA
ZF6EA	LDAA	M00A9
	LSRA
	LSRA
	LSRA
	LSRA
	INX
	INX
	BRA	ZF6D1
ZF6F4	DEX
	BNE	ZF6EA
ZF6F7	LDAA	joybut
	LDAB	M00C9
	BITB	#$02
	BNE	ZF707
	TSTB
	BPL	ZF705
	JMP	ZF741
ZF705	ORAA	#$FB
ZF707	COMA
	CMPA	M00A8
	BEQ	ZF741
	STAA	M00A8
	RORA
	LDAB	M00C9
	BITB	#$02
	BNE	ZF71C
	LDX	#DDR2
	RORA
	SEC
	BRA	ZF720
ZF71C	LDX	#DDR1
	CLC
ZF720	RORA
	LDAB	$A4,X
	BCC	ZF72B
	BMI	ZF737
	ORAB	#$80
	BRA	ZF72F
ZF72B	BPL	ZF737
	ANDB	#$7F
ZF72F	STAB	$A4,X
	TSTA
	BMI	ZF73E
	OIM	#$80,M00CA
ZF737	TSTA
	BMI	ZF741
	INX
	SEC
	BRA	ZF720
ZF73E	OIM	#$40,M00CA
ZF741	LDAA	M00CA
	BITA	#$02
	BNE	ZF778
	BITA	#$C0
	BEQ	ZF753
	BITA	#$08
	BNE	ZF756
ZF74F	CLI
	AIM	#$3F,M00CA
ZF753	JMP	ZF13A
ZF756	BITA	#$80
	BEQ	ZF766
	SEI
	LDAA	#$FE
	LDAB	#$01
	LDX	#M00A4
	JSR	tx_val
	CLI
ZF766	TIM	#$40,M00CA
	BEQ	ZF74F
	SEI
	LDAA	#$FF
	LDAB	#$01
	LDX	#M00A5
	JSR	tx_val
	BRA	ZF74F
ZF778	LDAA	>M00A7
	BNE	ZF74F
	LDAA	M0094
	STAA	>M00A7
	CLRA
	LDAB	M00A4
	BPL	ZF789
	ORAA	#$02
ZF789	ASLB
	ASLB
	ASLB
	ASLB
	STAB	M00A9
	LDAB	M00A5
	BPL	ZF795
	ORAA	#$01
ZF795	ANDB	#$7F
	ORAB	M00A9
	STAB	M00A9
	SEI
	LDAB	#$01
	LDX	#M00A9
	JSR	tx_val
	BRA	ZF74F
ZF7A6	AIM	#$7F,M00A1
	LDX	#DDR1
	LDAA	#$0C
	STAA	M00C5
ZF7B0	LDAB	M009F
	ANDB	M00C5
	BNE	ZF7CD
	LDAB	M00C5
	BITB	M0094
	BEQ	ZF7CA
	CLRA
	STAA	$A4,X
	STAA	$A6,X
	STAA	$A8,X
	COMB
	ANDB	M0094
	STAB	M0094
	BSR	ZF7EF
ZF7CA	JMP	ZF85D
ZF7CD	CMPB	M00C5
	BNE	ZF7D4
	JMP	ZF85D
ZF7D4	LDAA	M0094
	ANDA	M00C5
	CBA
	BEQ	ZF7FB
	COMA
	ANDA	M0094
	ABA
	STAA	M0094
	BSR	ZF7EF
	LDAA	#$64
	STAA	$A2,X
	LDAA	$95,X
	BEQ	ZF837
	STAA	$A4,X
	BRA	ZF82F
ZF7EF	LDAA	M00A1
	BMI	ZF7F6
; invalid code
	ANDA	#$DF
	FCB	$7D

ZF7F6	ANDA	#$BF
	STAA	M00A1
	RTS
ZF7FB	LDAA	M00A1
	BMI	ZF805
	BITA	#$20
	BNE	ZF80D
	BRA	ZF809
ZF805	BITA	#$40
	BNE	ZF80D
ZF809	LDAB	$95,X
	BNE	ZF817
ZF80D	LDAB	$99,X
	BEQ	ZF85D
	LDAB	$A8,X
	BNE	ZF85D
	BRA	ZF837
ZF817	LDAB	$97,X
	BEQ	ZF81F
	LDAB	$A6,X
	BEQ	ZF82B
ZF81F	LDAB	$A4,X
	BNE	ZF85D
	BSR	ZF86F
	LDAB	$99,X
	STAB	$A8,X
	BRA	ZF85D
ZF82B	LDAB	$A4,X
	BEQ	ZF835
ZF82F	LDAB	$97,X
	STAB	$A6,X
	BRA	ZF83B
ZF835	BSR	ZF86F
ZF837	LDAB	$99,X
	STAB	$A8,X
ZF83B	LDAB	M0094
	LDX	#MF87A
	LDAA	M00A1
	BMI	ZF848
	INX
	INX
	LSRB
	LSRB
ZF848	LSRB
	ANDB	#$01
	ABX
	LDAA	,X
	SEI
	TAB
	ORAB	#$80
	STAB	M00C6
	LDX	#M00C6
	LDAB	#$01
	JSR	tx_val
	CLI
ZF85D	LDAA	M00A1
	BMI	ZF87E
	ORAA	#$80
	STAA	M00A1
	LDAA	#$03
	STAA	M00C5
	LDX	#DDR2
	JMP	ZF7B0
ZF86F	TSTA
	BMI	ZF875
; invalid code
	ORAA	#$20
	FCB	$7D
ZF875	ORAA	#$40
	STAA	M00A1
	RTS
MF87A	ASLA
	NEGB
	FCB	$4B
	TSTA
ZF87E	LDAA	#$74
	LDAB	M00A1
	TIM	#$02,joybut
	BNE	ZF88F
	BITB	#$02
	BNE	ZF89F
	ORAB	#$02
	BRA	ZF897
ZF88F	BITB	#$02
	BEQ	ZF89F
	ANDB	#$FD
	ORAA	#$80
ZF897	STAB	M00A1
	SEI
	CLRB
	JSR	tx_val
	CLI
ZF89F	JMP	ZF13A
ZF8A2	TIM	#$10,M00CB
	BNE	ZF8D1
	LDAB	M00D7
	BPL	ZF8D1
	LDAA	#$16
ZF8AD	DECA
	BNE	ZF8AD
ZF8B0	LDAA	DR2
	CMPA	DR2
	BNE	ZF8B0
	BITA	#$04
	BEQ	ZF8BB
; invalid code
	FCB	$6D

ZF8BB	SEC
	LDAA	M00A4
	ROLA
	STAA	M00A4
	DEC	>M00A5
	BNE	ZF8D1
	LDAB	#$08
	STAB	M00A5
ZF8CA	TIM	#$20,TRCSR
	BEQ	ZF8CA
	STAA	TDR
ZF8D1	JMP	ZF13A
ZF8D4	AIM	#$78,M00CB
	LDAB	M00CD
	TBA
	BPL	ZF8F3
	CMPB	#$80
	BNE	ZF8E3
	JMP	ZF990
ZF8E3	CMPB	#$87
	BCS	ZF916
	CMPB	#$9B
	BCC	ZF916
	ANDB	#$7F
	SUBB	#$07
	ADDB	#$1C
	BRA	ZF8FD
ZF8F3	CMPB	#$07
	BCS	ZF916
	CMPB	#$23
	BCC	ZF916
	SUBB	#$07
ZF8FD	ASLB
	LDX	#MF930
	ABX
	LDX	,X
	BEQ	ZF916
	BITA	#$80
	BEQ	ZF914
	TIM	#$08,M00CB
	BNE	ZF916
	TIM	#$03,M00CA
	BNE	ZF916
ZF914	JMP	,X
ZF916	AIM	#$18,M00CB
	BRA	ZF929
ZF91B	TIM	#$08,M00CB
	BEQ	ZF929
	AIM	#$F7,M00CB
	OIM	#$08,M00C9
	OIM	#$04,TRCSR
ZF929	CLR	>M00CC
	OIM	#$10,TRCSR
	RTS

MF930	FDB	ZFAA4
	FDB	ZFAB9
	FDB	ZFACB
	FDB	ZFAE8
	FDB	ZFB0B
	FDB	ZFB25
	FDB	ZFB39
	FDB	ZFB5F
	FDB	ZFB7C
	FDB	ZFB82
	FDB	ZF91B
	FDB	ZFB88
	FDB	ZF9AF
	FDB	ZF9C1
	FDB	ZF9C5
	FDB	ZF9CC
	FDB	ZF9F3
	FDB	ZFA12
	FDB	ZFA21
	FDB	ZFA41
	FDB	ZFA5B
	FDB	ZFA95
	FDB	0
	FDB	0
	FDB	0
	FDB	ZFBD4
	FDB	ZFC16
	FDB	ZFC3B
	FDB	ZFC59
	FDB	ZFC62
	FDB	ZFC62
	FDB	ZFC62
	FDB	ZFC83
	FDB	ZFC8C
	FDB	0
	FDB	0
	FDB	ZFC95
	FDB	ZFC95
	FDB	0
	FDB	ZFCA2
	FDB	0
	FDB	ZFCAE
	FDB	ZFCAE
	FDB	0
	FDB	0
	FDB	0
	FDB	ZFCAE
	FDB	ZFCC9

ZF990	AIM	#$EF,TRCSR
	LDAB	#$02
	JSR	ZFCFE
	BCC	ZF9AB
	LDAA	M00CE
	CMPA	#$01
	BNE	ZF9A8
	LDS	#M00FF
	LDX	#ZF010
	PSHX
	RTS
ZF9A8	JMP	ZF929
ZF9AB	OIM	#$10,TRCSR
	RTS
ZF9AF	TIM	#$08,M00CB
	BNE	ZF9BE
	OIM	#$08,M00CB
	AIM	#$F7,M00C9
	LDAA	sdbfend
	STAA	M00D8
ZF9BE	JMP	ZF929
ZF9C1	LDAA	#$28
	BRA	ZF9C7
ZF9C5	LDAA	#$30
ZF9C7	STAA	M00CA
	JMP	ZFA47
ZF9CC	LDAA	M00CA
	BITA	#$20
	BNE	ZF9D5
	JMP	ZF929
ZF9D5	BITA	#$18
	BEQ	ZF9F0
	TIM	#$02,M00C9
	BNE	ZF9E1
	CLR	>M00A4
ZF9E1	SEI
	LDAA	#$FD
	LDAB	#$02
	LDX	#M00A4
	JSR	tx_val
	CLI
	JMP	ZF91B
ZF9F0	JMP	ZF929
ZF9F3	LDAB	#$02
	JSR	ZFCFE
	BCC	ZFA0E
	AIM	#$F8,M00CB
	LDAA	M00CE
	STAA	M0094
	STAA	M00A7
	LDAA	#$0A
	STAA	M00A6
	LDAA	#$22
	STAA	M00CA
	JMP	ZFA47
ZFA0E	OIM	#$10,TRCSR
	RTS
ZFA12	LDAA	#$21
	STAA	M00CA
	OIM	#$02,M00C9
	LDD	#TCSR
	STD	M00A4
	JMP	ZF91B
ZFA21	LDAB	#$07
	JSR	ZFCFE
	BCC	ZFA3D
	LDX	#M0095
	JSR	ZFD1E
	CLRA
	CLRB
	STAA	M0094
	STAA	M00A1
	STD	M00A2
	LDAA	#$24
	STAA	M00CA
	JMP	ZFA47
ZFA3D	OIM	#$10,TRCSR
	RTS
ZFA41	AIM	#$DF,M00CA
	JMP	ZF91B
ZFA47	CLRA
	CLRB
	STD	M00A4
	STD	M009D
	STD	M00A8
	STAA	M009F
	LDAA	#$06
	STAA	joybut
	OIM	#$02,M00C9
	JMP	ZF91B
ZFA5B	LDAB	#$07
	JSR	ZFCFE
	BCC	ZFA91
	AIM	#$F8,M00CB
	SEI
	CLRB
ZFA67	LDX	#M00CE
	ABX
	LDAA	,X
	ANDA	#$0F
	CMPA	#$0A
	BCC	ZFA83
	LDAA	,X
	ANDA	#$F0
	CMPA	#$A0
	BCC	ZFA83
	LDAA	,X
	LDX	#M0082
	ABX
	STAA	,X
ZFA83	INCB
	CMPB	#$06
	BNE	ZFA67
	LDX	#$3E8
	STX	M0080
	CLI
	JMP	ZF91B
ZFA91	OIM	#$10,TRCSR
	RTS
ZFA95	SEI
	LDAB	#$06
	LDAA	#$FC
	LDX	#M0082
	JSR	tx_val
	CLI
	JMP	ZF91B
ZFAA4	LDAB	#$02
	JSR	ZFCFE
	BCC	ZFAB5
	AIM	#$F8,M00CB
	LDAA	M00CE
	STAA	M00B4
	JMP	ZF91B
ZFAB5	OIM	#$10,TRCSR
	RTS
ZFAB9	JSR	updmous
	AIM	#$0F,M00C9
	OIM	#$90,M00C9
	CLR	>M00BD
	CLR	>M00BC
	JMP	ZFBAF
ZFACB	LDAB	#$05
	JSR	ZFCFE
	BCC	ZFAE4
	LDX	#M00AA
	JSR	ZFD1E
	JSR	updmous
	AIM	#$0F,M00C9
	OIM	#$A0,M00C9
	JMP	ZFBAF
ZFAE4	OIM	#$10,TRCSR
	RTS
ZFAE8	LDAB	#$03
	JSR	ZFCFE
	BCC	ZFB07
	LDX	#M00AE
	JSR	ZFD1E
	JSR	updmous
	AIM	#$0F,M00C9
	OIM	#$C0,M00C9
	CLR	>M00BA
	CLR	>M00BB
	JMP	ZFBAF
ZFB07	OIM	#$10,TRCSR
	RTS
ZFB0B	LDAB	#$03
	JSR	ZFCFE
	BCC	ZFB21
	LDX	#M00B0
	JSR	ZFD1E
	CLR	>M00BC
	CLR	>M00BD
	JMP	ZF91B
ZFB21	OIM	#$10,TRCSR
	RTS
ZFB25	LDAB	#$03
	JSR	ZFCFE
	BCC	ZFB35
	LDX	#M00B2
	JSR	ZFD1E
	JMP	ZF91B
ZFB35	OIM	#$10,TRCSR
	RTS
ZFB39	LDAA	M00C9
	BITA	#$02
	BNE	ZFB5C
	TSTA
	BPL	ZFB5C
	BITA	#$20
	BEQ	ZFB5C
	SEI
	LDAA	M00C2
	STAA	M00B5
	LDAA	#$F7
	LDAB	#$05
	LDX	#M00B5
	JSR	tx_val
	CLI
	AIM	#$F0,M00C2
	JMP	ZF91B
ZFB5C	JMP	ZF929
ZFB5F	LDAB	#$06
	JSR	ZFCFE
	BCC	ZFB78
	LDX	#M00B5
	JSR	ZFD1E
	AIM	#$F0,M00C2
	AIM	#$0F,M00C9
	OIM	#$A0,M00C9
	JMP	ZF91B
ZFB78	OIM	#$10,TRCSR
	RTS
ZFB7C	OIM	#$01,M00C9
	JMP	ZF91B
ZFB82	AIM	#$FE,M00C9
	JMP	ZF91B
ZFB88	AIM	#$7F,M00C9
	JMP	ZF91B
; Update mouse status
updmous	LDAA	DR4		;joystick/mouse directions
	TAB
	ANDA	#$03		;mouse X pin data
	STAA	mousxpn
	LSRB
	LSRB
	ANDB	#$03		;mouse Y pin data
	STAB	mousypn
	CLRB
	STAB	M009D
	LDAA	DR2
	ANDA	#$06		;joystick buttons
	STAA	joybut
	BEQ	ZFBAA
	CMPA	#$06
	BNE	ZFBAC
ZFBAA	EORA	#$06
ZFBAC	STAA	M00C0		;buttons, but if both are same
	RTS			;state, they are inverted

ZFBAF	AIM	#$FD,M00C9
	TIM	#$07,M00CA
	BNE	ZFBC5
	AIM	#$F0,M009F
	AIM	#$F0,M00A9
	AIM	#$F0,M00A0
	AIM	#$04,M00A8
	BRA	ZFBD1
ZFBC5	LDAA	#$28
	STAA	M00CA
	CLRA
	CLRB
	STD	M00A4
	STD	M00A8
	STD	M009E
ZFBD1	JMP	ZF91B
ZFBD4	LDAB	#$04
	JSR	ZFCFE
	BCC	ZFC12
	LDX	#M00EE
	JSR	ZFD1E
	OIM	#$10,TRCSR
	AIM	#$F7,TCSR
	LDX	M00EE
	LDAA	M00F0
	BEQ	ZFC0E
ZFBED	CLR	>M00CC
	LDAB	#$64
ZFBF2	TIM	#$80,M00CB
	BNE	ZFC01
	LDAA	#$C8
ZFBF9	DECA
	BNE	ZFBF9
	DECB
	BEQ	ZFC0E
	BRA	ZFBF2
ZFC01	AIM	#$7F,M00CB
	LDAA	M00CD
	STAA	,X
	INX
	DEC	>M00F0
	BNE	ZFBED
ZFC0E	OIM	#$08,TCSR
	RTS
ZFC12	OIM	#$10,TRCSR
	RTS
ZFC16	LDAB	#$03
	JSR	ZFCFE
	BCC	ZFC37
	LDX	#M00EE
	JSR	ZFD1E
	SEI
	LDAA	#$F6
	CLRB
	JSR	tx_val
	LDAA	#$20
	LDAB	#$06
	LDX	M00EE
	JSR	tx_val
	CLI
	JMP	ZF91B
ZFC37	OIM	#$10,TRCSR
	RTS
ZFC3B	LDAB	#$03
	JSR	ZFCFE
	BCC	ZFC55
	LDX	#M00EE
	JSR	ZFD1E
	AIM	#$F7,TCSR
	LDX	M00EE
	JSR	,X
	OIM	#$08,TCSR
	JMP	ZF91B
ZFC55	OIM	#$10,TRCSR
	RTS
ZFC59	LDAA	#$07
	LDX	#M00B4
	LDAB	#$02
	BRA	ZFCD7
ZFC62	LDAA	M00C9
	ASLA
	ASLA
	BCS	ZFC71
	ASLA
	BCS	ZFC7A
	LDAA	#$08
	LDAB	#$01
	BRA	ZFCD7
ZFC71	LDAA	#$0A
	LDX	#M00AE
	LDAB	#$03
	BRA	ZFCD7
ZFC7A	LDAA	#$09
	LDX	#M00AA
	LDAB	#$05
	BRA	ZFCD7
ZFC83	LDAA	#$0B
	LDX	#M00B0
	LDAB	#$03
	BRA	ZFCD7
ZFC8C	LDAA	#$0C
	LDX	#M00B2
	LDAB	#$03
	BRA	ZFCD7
ZFC95	LDAA	M00C9
	LSRA
	BCS	ZFC9E
	LDAA	#$10
	BRA	ZFCD5
ZFC9E	LDAA	#$0F
	BRA	ZFCD5
ZFCA2	LDAA	M00C9
	ASLA
	BCS	ZFCAB
	LDAA	#$12
	BRA	ZFCD5
ZFCAB	CLRA
	BRA	ZFCD5
ZFCAE	LDAA	M00CA
	LSRA
	LSRA
	LSRA
	BCS	ZFCBC
	LSRA
	BCS	ZFCC5
	LDAA	#$15
	BRA	ZFCD5
ZFCBC	LDAA	#$19
	LDX	#M0095
	LDAB	#$07
	BRA	ZFCD7
ZFCC5	LDAA	#$14
	BRA	ZFCD5
ZFCC9	TIM	#$20,M00CA
	BNE	ZFCD2
	LDAA	#$1A
	BRA	ZFCD5
ZFCD2	CLRA
	BRA	ZFCD5
ZFCD5	LDAB	#$01
ZFCD7	STAA	M00C6
	STAB	M00C5
	SEI
	PSHX
	LDAA	#$F6
	CLRB
	JSR	tx_val
	PULX
	LDAA	M00C6
	LDAB	M00C5
	DECB
ZFCE9	JSR	tx_val
	LDAB	M00C5
	INCB
	CMPB	#$08
	BEQ	ZFCFA
	STAB	M00C5
	LDD	#DDR1
	BRA	ZFCE9
ZFCFA	CLI
	JMP	ZF929
ZFCFE	AIM	#$EF,TRCSR
	LDAA	M00CB
	BITA	#$40
	BNE	ZFD16
	CMPB	M00CC
	BCS	ZFD16
	BEQ	ZFD16
	SUBB	M00CC
	ORAB	M00CB
	STAB	M00CB
	CLC
	BRA	ZFD1D
ZFD16	ANDA	#$18
	DECB
	ABA
	STAA	M00CB
	SEC
ZFD1D	RTS

ZFD1E	CLRB
ZFD1F	PSHX
	LDX	#M00CD
	ABX
	LDAA	$01,X
	PULX
	STAA	,X
	INX
	INCB
	DEC	>M00CB
	TIM	#$07,M00CB
	BNE	ZFD1F
	RTS

; Place a new byte at the end of the serial transmit ring buffer
; X:
; A: byte value to be queued
; B: how many times the bytes must be sent
tx_val	TIM	#$10,M00CB	;test some status bit
	BNE	ZFD67		;exit function
	CMPB	M00D7		;if free space<=B
	BCC	ZFD67		;exit function
ZFD3D	PSHX
	XGDX			;swap X and A:B
	CLRA			;index high byte=0
	LDAB	sdbfend		;index low byte
	XGDX			;move to X,get A and B back
	STAA	sendbuf,X	;store to sendbuf+index
	LDAA	sdbfend
	INCA
	CMPA	#$15
	BNE	ZFD4D		;end of buffer?
	CLRA			;cycle to begin
ZFD4D	STAA	sdbfend
	DEC	>M00D7		;decrease free bytes counter
	PULX
	TSTB
	BEQ	ZFD5C
	LDAA	,X
	INX
	DECB
	BRA	ZFD3D
ZFD5C	LDAA	M00D7
	BPL	ZFD66		;send ready?
	AIM	#$7F,M00D7	;clear send ready bit
	JSR	sendbyt
ZFD66	SEC			;set carry
ZFD67	RTS

;check if a byte in ring buffer can be transmitted, and if so, transmit it
sendbyt	LDAA	TRCSR
	BITA	#$20		;serial overrun error?
	BEQ	ZFD9C
	LDAA	sdbfbeg		;index of first byte in ring buffer
	LDAB	M00CB
	BITB	#$08
	BEQ	ZFD7A
	CMPA	M00D8
	BEQ	ZFD9C
ZFD7A	LDX	#sendbuf	;serial transmit buffer
	LDAB	sdbfbeg		;index of first byte in ring buffer
	ABX
	LDAB	,X		;next byte
	STAB	TDR		;send byte
	OIM	#$04,TRCSR	;enable transmit interrupt
	INCA
	CMPA	#$15		;end of buffer
	BNE	ZFD8D
	CLRA			;loop back to buffer begin
ZFD8D	STAA	sdbfbeg		;new value of first byte index
	LDAA	M00D7
	ANDA	#$7F
	INCA
	CMPA	#$15
	BNE	ZFD9A
	ORAA	#$80
ZFD9A	STAA	M00D7
ZFD9C	RTS

hdlr_SWI2 LDAA	TCSR
	BITA	#$40
	BNE	ZFDA6
	JMP	ZFECF
ZFDA6	LDD	FRC
	ADDB	#$13
	CMPB	OCR+1
	BNE	ZFDAF
	NOP
ZFDAF	LDD	OCR
	ADDD	#$3E8
	STD	OCR
	LDAA	M0083
	BNE	ZFDBD
ZFDBA	JMP	ZFE29
ZFDBD	LDX	M0080
	DEX
	STX	M0080
	BNE	ZFDBA
	LDX	#$3E8
	STX	M0080
	LDX	#DR3
	LDAB	#$60
ZFDCE	DEX
	LDAA	$82,X
	ADDA	#$01
	DAA
	CPX	#DDR1
	BEQ	ZFE27
	CBA
	BNE	ZFE27
	CLRA
	STAA	$82,X
	CPX	#DDR4
	BEQ	ZFDCE
	CPX	#DDR3
	BNE	ZFDED
	LDAB	#$24
	BRA	ZFDCE
ZFDED	CPX	#DR2
	BNE	ZFE1E
	LDAB	M0083
	CMPB	#$02
	BNE	ZFE10
	LDAB	#$29
	LDAA	M0084
	CMPA	#$28
	BCS	ZFDCE
	LDAA	M0082
	BITA	#$10
	BEQ	ZFE08
	ADDA	#$0A
ZFE08	ANDA	#$03
	BNE	ZFDCE
	LDAB	#$30
	BRA	ZFDCE
ZFE10	LDX	#MFED0
	LDAB	M0083
	DECB
	ABX
	LDAB	,X
	LDX	#DR2
	BRA	ZFDCE
ZFE1E	LDAA	#$01
	STAA	$82,X
	LDAB	#$13
	JMP	ZFDCE
ZFE27	STAA	$82,X
ZFE29	LDAA	M00D4
	BEQ	ZFE4E
	CMPA	#$CD
	BNE	ZFE3E
	LDS	#M00FF
	LDX	#ZF00B
	PSHX
	LDS	#M00F8
	JMP	ZFECF
ZFE3E	TIM	#$01,TRCSR
	BNE	ZFE4B
	CLRA
	AIM	#$EF,M00CB
	OIM	#$04,TRCSR
;	TST	$4C,X
; invalid code
	FCB	$6D
ZFE4B	INCA
	STAA	M00D4
ZFE4E	LDAB	M00CA
	LDAA	M00C9
	BITA	#$02
	BNE	ZFE5F
	BITB	#$20
	BNE	ZFE67
	TSTA
	BMI	ZFE6E
	BRA	ZFEC5
ZFE5F	BITB	#$20
	BEQ	ZFEC5
	BITB	#$01
	BCS	ZFECF
ZFE67	LDAA	M009E
	BEQ	ZFE6E
	INCA
	STAA	M009E
ZFE6E	LDAA	M009D
	BEQ	ZFE75
	INCA
	STAA	M009D
ZFE75	BITB	#$20
	BEQ	ZFEC5
	BITB	#$04
	BEQ	ZFEA8
	LDX	#DDR1
ZFE80	LDAA	$A2,X
	BEQ	ZFE8C
	DECA
	STAA	$A2,X
	DEX
	BEQ	ZFEC5
	BRA	ZFEA3
ZFE8C	LDAA	#$64
	STAA	$A2,X
ZFE90	INX
	INX
	LDAA	$A2,X
	BEQ	ZFE99
	DECA
	STAA	$A2,X
ZFE99	CPX	#DR3
	BCS	ZFE90
	CPX	#DR4
	BEQ	ZFEC5
ZFEA3	LDX	#DDR2
	BRA	ZFE80
ZFEA8	BITB	#$02
	BEQ	ZFEC5
	TIM	#$08,M00CB
	BNE	ZFECF
	LDAA	M00A6
	BEQ	ZFEB8
	DECA
	BRA	ZFEC1
ZFEB8	LDAA	#$0A
	LDAB	M00A7
	BEQ	ZFEC1
	DECB
	STAB	M00A7
ZFEC1	STAA	M00A6
	BRA	ZFECF
ZFEC5	LDAA	modkbf
	BMI	ZFECC
	JMP	ZF1B7
ZFECC	EIM	#$80,modkbf
ZFECF	RTI

MFED0	FCB	$32,$29,$32,$31,$32,$31,$32,$32
	FCB	$31,$00,$00,$00,$00,$00,$00,$32
	FCB	$31,$32

; serial interrupt: a byte has been received
hdlr_SCI LDAA	TRCSR		;serial status
	BITA	#$40		;overrun
	BNE	sst_ovr
	BITA	#$80		;character received
	BNE	sst_rec
	BITA	#$20
	BNE	ZFEF7
	RTI
sst_rec	BSR	sci_rec
	RTI
sst_ovr	BSR	sci_ovr
	RTI
ZFEF7	LDAA	M00D7
	BPL	ZFF00
	AIM	#$FB,TRCSR
	BRA	ZFF03
ZFF00	JSR	sendbyt
ZFF03	RTI
; Manage received character from serial
sci_rec	LDAB	M00CC
	LDAA	RDR
	BNE	ZFF0D
	TSTB
	BEQ	ZFF3F
ZFF0D	CMPB	#$07
	BEQ	ZFF3F
	LDAA	M00CB
	BITA	#$20
	BNE	ZFF33
	LDX	#M00CD
	ABX
	LDAB	RDR
	STAB	,X
	INC	>M00CC
	BITA	#$07
	BEQ	ZFF2D
	DECA
	BITA	#$07
	BNE	ZFF2F
	ORAA	#$40
ZFF2D	ORAA	#$80
ZFF2F	STAA	M00CB
	BRA	ZFF3F
ZFF33	DECA
	BITA	#$07
	BNE	ZFF2F
	ANDA	#$18
	STAA	M00CB
	CLRA
	STAA	M00CC
ZFF3F	RTS
; Manage SCI overruns
sci_ovr	LDAB	RDR
	OIM	#$01,TRCSR
	LDAA	#$20
ZFF47	DECA
	BNE	ZFF47
	TIM	#$01,TRCSR
	BEQ	ZFF58
	INC	>M00D4
	OIM	#$10,M00CB
	AIM	#$FB,TRCSR
ZFF58	LDAA	M00CB
	LDAB	M00CC
	BEQ	ZFF63
	DECA
	BITA	#$07
	BNE	ZFF69
ZFF63	ANDA	#$08
	CLRB
	STAB	M00CC
;	TST	M8A20
; invalid code
	FCB	$7D
ZFF69
	ORAA	#$20
	STAA	M00CB
	RTS

chksum	FCB	$A6,$FF,$00,$FF,$00,$FF,$00,$FF
	FCB	$00,$FF,$00,$FF,$00,$FF,$00,$FF
	FCB	$00,$FF,$00,$FF,$00,$FF,$00,$FF
	FCB	$00,$FF,$00,$FF,$00,$FF,$00,$FF
	FCB	$00,$FF,$00,$FF,$00,$FF,$00,$FF
	FCB	$00,$F1,$14,$00,$01,$46,$00,$FF
	FCB	$F1,$14,$00,$01,$46,$7E,$0A,$FF
	FCB	$00,$FF,$00,$FF,$00,$FF,$F1,$14
	FCB	$00,$01,$31,$00,$FF,$F1,$14,$00
	FCB	$01,$31,$7E,$0A,$00,$FF,$00,$FF
	FCB	$00,$FF,$00,$F1,$14,$00,$01,$1C
	FCB	$00,$FF,$F1,$14,$00,$01,$1C,$7E
	FCB	$0A,$FE,$00,$DF,$00,$FF,$00,$FF
	FCB	$F1,$1C,$00,$00,$FF,$01,$02,$F1
	FCB	$1C,$00,$00,$FF,$7E,$81,$F3,$1C
	FCB	$00,$00,$FF,$01,$00,$F3,$1C,$00
	FCB	$00,$FF

svec_SCI FDB	hdlr_SCI
svec_TOF FDB	hdlr_RST
svec_OCF FDB	hdlr_SWI2
svec_ICF FDB	hdlr_RST
svec_IRQ FDB	hdlr_RST
svec_SWI FDB	hdlr_RST
svec_NMI FDB	hdlr_RST
svec_RST FDB	hdlr_RST

	END
